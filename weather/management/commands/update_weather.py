from django.core.management.base import BaseCommand
from django.utils import timezone
from weather.services import weather_service
from alerts.models import Alert
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = 'Met √† jour les donn√©es m√©t√©orologiques et g√©n√®re les alertes automatiques'

    def add_arguments(self, parser):
        parser.add_argument(
            '--city',
            type=str,
            help='Mettre √† jour une ville sp√©cifique seulement',
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='Forcer la mise √† jour m√™me si d√©j√† fait r√©cemment',
        )

    def handle(self, *args, **options):
        start_time = timezone.now()
        self.stdout.write(f"üå°Ô∏è D√©but mise √† jour m√©t√©o - {start_time}")

        try:
            # Mise √† jour des donn√©es m√©t√©o
            if options['city']:
                result = self._update_single_city(options['city'])
            else:
                result = weather_service.update_weather_for_all_cities()

            # Afficher les r√©sultats
            self.stdout.write(
                self.style.SUCCESS(
                    f"‚úÖ Mise √† jour termin√©e en {(timezone.now() - start_time).seconds}s"
                )
            )
            self.stdout.write(f"   - Villes mises √† jour: {result['total_updated']}")
            self.stdout.write(f"   - Succ√®s: {', '.join(result['updated_cities'])}")
            
            if result['errors']:
                self.stdout.write(
                    self.style.WARNING(f"   - Erreurs: {len(result['errors'])}")
                )
                for error in result['errors']:
                    self.stdout.write(f"     ‚ö†Ô∏è {error}")

            # G√©n√©rer les alertes apr√®s mise √† jour m√©t√©o
            self._generate_automatic_alerts(result['updated_cities'])

        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"‚ùå Erreur lors de la mise √† jour: {str(e)}")
            )
            logger.error(f"Erreur update_weather: {e}")

    def _update_single_city(self, city_name):
        """Mettre √† jour une seule ville"""
        try:
            weather_data = weather_service.get_current_weather(city_name)
            if weather_data:
                return {
                    'updated_cities': [city_name],
                    'errors': [],
                    'total_updated': 1
                }
            else:
                return {
                    'updated_cities': [],
                    'errors': [f"Aucune donn√©e pour {city_name}"],
                    'total_updated': 0
                }
        except Exception as e:
            return {
                'updated_cities': [],
                'errors': [f"Erreur {city_name}: {str(e)}"],
                'total_updated': 0
            }

    def _generate_automatic_alerts(self, updated_cities):
        """G√©n√©rer des alertes automatiques bas√©es sur la m√©t√©o"""
        from alerts.services import alert_service
        
        try:
            alerts_created = alert_service.generate_weather_alerts(updated_cities)
            if alerts_created:
                self.stdout.write(
                    self.style.SUCCESS(f"üö® {len(alerts_created)} nouvelles alertes g√©n√©r√©es")
                )
                for alert in alerts_created:
                    self.stdout.write(f"   - {alert.title} ({alert.severity})")
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"‚ùå Erreur g√©n√©ration alertes: {e}")
            )